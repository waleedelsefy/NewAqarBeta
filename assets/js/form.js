!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self,function(){var n=e.Cookies,o=e.Cookies=t();o.noConflict=function(){return e.Cookies=n,o}}())}(this,(function(){"use strict";function e(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)e[o]=n[o]}return e}return function t(n,o){function r(t,r,i){if("undefined"!=typeof document){"number"==typeof(i=e({},o,i)).expires&&(i.expires=new Date(Date.now()+864e5*i.expires)),i.expires&&(i.expires=i.expires.toUTCString()),t=encodeURIComponent(t).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var c="";for(var u in i)i[u]&&(c+="; "+u,!0!==i[u]&&(c+="="+i[u].split(";")[0]));return document.cookie=t+"="+n.write(r,t)+c}}return Object.create({set:r,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var t=document.cookie?document.cookie.split("; "):[],o={},r=0;r<t.length;r++){var i=t[r].split("="),c=i.slice(1).join("=");try{var u=decodeURIComponent(i[0]);if(o[u]=n.read(c,u),e===u)break}catch(e){}}return e?o[e]:o}},remove:function(t,n){r(t,"",e({},n,{expires:-1}))},withAttributes:function(n){return t(this.converter,e({},this.attributes,n))},withConverter:function(n){return t(e({},this.converter,n),this.attributes)}},{attributes:{value:Object.freeze(o)},converter:{value:Object.freeze(n)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"})}));/*------------------------------------------------------# dido Form Ajax----------------------------------------------------- */if( document.querySelector(".siteform") ){  var forms = document.querySelectorAll(".siteform");  forms.forEach(form => form.addEventListener('submit', (e)=>{    e.preventDefault();    const form = e.currentTarget;    var formData = new FormData(form);    var User_Name = formData.get('User_Name');    var User_Phone = formData.get('User_Phone');    const XHR = new XMLHttpRequest();    XHR.onreadystatechange = () => {    if (XHR.readyState === 4) {        Dido_cookies_handler( User_Name,User_Phone );        Dido_response( XHR.response );    }    }    XHR.open('POST', dd_ajax_url);    XHR.send(formData);  }));  function Dido_response( data )  {    const response = JSON.parse(data);    if( response.hasOwnProperty('code') )    {        var responseCode = response.code;        if( responseCode == 0 )        {            if( response.hasOwnProperty('msg') ){ Dido_msgBox(responseCode,response.msg) }        }        if( responseCode == 1 )        {          if( response.hasOwnProperty('msg') ){ Dido_msgBox(responseCode,response.msg) }        }    }  }}function Dido_msgBox(responseCode,responseMSG){  var rightSign = '<div><span class="rightSign">✓</span></div>';  var wrongSign = '<div><span class="wrongSign">✗</span></div>';  var htmlSign = ( responseCode == 1 ) ? rightSign : wrongSign;  var lightbox = document.getElementById("response-lightbox");  if( lightbox )  {      lightbox.classList.add('active');      var responseMSGbox = document.getElementById("responseMSG");      responseMSGbox.innerHTML = htmlSign + responseMSG;      msgTimer();      console.log(responseMSG);  }}var lightbox = document.getElementById("response-lightbox");lightbox.addEventListener('click',()=>{removeMSG();});function msgTimer() {  setTimeout(function() {removeMSG();}, 5000);}function removeMSG(){  var lightbox = document.getElementById("response-lightbox");  lightbox.classList.remove('active');  var responseMSGbox = document.getElementById("responseMSG");  responseMSGbox.innerHTML = "";}function Dido_cookies_handler( User_Name,User_Phone ){  cookieName = Dido_get_cookies( 'User_Name' );  cookiePhone = Dido_get_cookies( 'User_Phone' );  if( ( cookieName != User_Name ) || cookieName == 'undefined' ){ Dido_set_cookies( 'User_Name',User_Name ) }  if( ( cookiePhone != User_Phone ) || cookiePhone == 'undefined' ){ Dido_set_cookies( 'User_Phone',User_Phone ) }  setFormsValue(User_Name,User_Phone);}function Dido_set_cookies( key,value ){  Cookies.set(key,value, { expires:365 })  return 0;}function Dido_get_cookies( name ){  return Cookies.get(name);}function setFormsValue(name,phone){    var nameinputs = document.querySelectorAll(".User_Name");    var phoneinputs = document.querySelectorAll(".User_Phone");    nameinputs.forEach(nameinput => { nameinput.value = name; });    phoneinputs.forEach(phoneinput => { phoneinput.value = phone; });}function DidoCookiesChecher(){    cookieName = Dido_get_cookies( 'User_Name' );    cookiePhone = Dido_get_cookies( 'User_Phone' );    if( typeof cookieName != 'undefined' && typeof cookiePhone != 'undefined' )    {      setFormsValue(cookieName,cookiePhone);    }}function DidocurrancyCookiesChecher(){  var cookiecurr = Dido_get_cookies( 'currency' );  if( cookiecurr !== 'undefined' )  {    Dido_update_currancy(cookiecurr);    Dido_set_header_currancy(cookiecurr);  }}document.addEventListener("DOMContentLoaded", () => {  DidoCookiesChecher();  DidocurrancyCookiesChecher();});if( document.querySelector(".curr-item") ){  var currs = document.querySelectorAll(".curr-item");  currs.forEach(curr => curr.addEventListener('click', (e)=>{    let html = curr.innerHTML;    var maincurr = document.getElementById("main-curr");    maincurr.innerHTML = html;    var currType = curr.dataset.currancy;    var cookiecurr = Dido_get_cookies( 'currency' );    if( ( cookiecurr != currType ) || cookiecurr == 'undefined' ){ Dido_set_cookies( 'currency',currType ) }    Dido_update_currancy(currType);  }));}function Dido_update_currancy(currType){  var cookierates = Dido_get_cookies( 'rates' );  if( typeof cookierates !== 'object' ){    fetch(theme_url + '/storage/data/currency.json')    .then((response) => response.json())    .then((data) => {      let rates = { 'USDEGP' : data.USDEGP , 'USDAED' : data.USDAED };      Dido_set_cookies( 'rates',rates )      Dido_set_currancy(currType,rates);    });  } else {    Dido_set_currancy(currType,cookierates);  }}function Dido_set_currancy(currType,rates){  var priceNUMs = document.querySelectorAll(".priceNUM");  priceNUMs.forEach(price => {    var defaultprice = price.dataset.value;    var EGPval = parseInt(defaultprice);    var mainBox = price.closest('.priceBX');    var currencyName = mainBox.querySelector('.priceCUR');    var USDval = ( parseInt(defaultprice) / parseInt( rates.USDEGP ) );    var AEDval = ( USDval * parseInt( rates.USDAED ) );    switch (currType) {      case 'EGP':        price.innerHTML = EGPval.toFixed();        currencyName.innerHTML = currType;        break;      case 'USD':        price.innerHTML = USDval.toFixed();        currencyName.innerHTML = currType;        break;      case 'AED':        price.innerHTML = AEDval.toFixed();        currencyName.innerHTML = currType;        break;    }  });}function Dido_set_header_currancy(curr){  var curli = document.querySelector('[data-currancy="'+curr+'"]');  if( curli )  {    let html = curli.innerHTML;    var maincurr = document.getElementById("main-curr");    maincurr.innerHTML = html;  }}if( document.querySelector(".fav-project") ){  document.addEventListener('click', (e)=>{    const el = e.target;    if( el.tagName === 'I' && el.closest(".fav-project") )    {      var favButton = el.closest(".fav-project");      var project_ID = favButton.dataset.id;      dido_fav_action(project_ID);    }  });}function dido_fav_action(project_ID){  cookieName = Dido_get_cookies( 'User_Name' );  cookiePhone = Dido_get_cookies( 'User_Phone' );  if( typeof cookieName != 'undefined' && typeof cookiePhone != 'undefined' )  {    dido_add_fav(cookieName,cookiePhone,project_ID);  } else {    Dido_set_cookies( 'project_ID_to_add',project_ID );    Dido_open_fav_modal(project_ID);  }}function Dido_open_fav_modal(project_ID){  var modal = document.getElementById("fav-popup");  if( modal ){modal.classList.add('active');}}document.addEventListener('click', (e)=>{  if( e.target.classList.contains('lightbox-close') )  {    var modal = e.target.closest(".lightbox-target");    if( modal ){modal.classList.remove('active');}  }});function dido_add_fav(Name,Phone,project_ID){  var User_Name = Dido_get_cookies( 'User_Name' );  var User_Phone = Dido_get_cookies( 'User_Phone' );  var user_fav = Dido_get_cookies( 'user_fav' );  if ( typeof user_fav != 'undefined' ) {    user_fav = JSON.parse(user_fav);    user_fav.push(project_ID);    Dido_set_cookies('user_fav',JSON.stringify(user_fav));    Dido_msgBox(1,'Added to favourites');    Dido_send_fav(User_Name,User_Phone,user_fav);  } else {    var user_fav = [];    user_fav.push(project_ID);    Dido_set_cookies('user_fav',JSON.stringify(user_fav));    Dido_msgBox(1,'Added to favourites');    Dido_send_fav(User_Name,User_Phone,user_fav);  }}if( document.querySelector(".favform") ){  var forms = document.querySelectorAll(".favform");  forms.forEach(form => form.addEventListener('submit', (e)=>{    e.preventDefault();    const form = e.currentTarget;    var formData = new FormData(form);    var User_Name = formData.get('User_Name');    var User_Phone = formData.get('User_Phone');    Dido_set_cookies( 'User_Name',User_Name );    Dido_set_cookies( 'User_Phone',User_Phone );    setFormsValue(User_Name,User_Phone);    var project_ID = Dido_get_cookies( 'project_ID_to_add' );    dido_fav_action(project_ID);  }));}function Dido_send_fav(User_Name,User_Phone,user_fav){  var formData = new FormData;  formData.append('action','fav_form');  formData.append('User_Name',User_Name);  formData.append('User_Phone',User_Phone);  formData.append('user_fav',user_fav);  const XHR = new XMLHttpRequest();  XHR.onreadystatechange = () => {    if (XHR.readyState === 4) {      console.log(XHR.response);    }  }  XHR.open('POST', dd_ajax_url);  XHR.send(formData);}/** ---------------------------------------------------------- **/if( document.querySelector(".meetform") ){  var forms = document.querySelectorAll(".meetform");  forms.forEach(form => form.addEventListener('submit', (e)=>{    e.preventDefault();    const form = e.currentTarget;    var formData = new FormData(form);    formData.append('action','meeting_form');    const XHR = new XMLHttpRequest();    XHR.onreadystatechange = () => {      if (XHR.readyState === 4) {        const response = JSON.parse(XHR.response);        if( response.hasOwnProperty('code') )        {            var responseCode = response.code;            if( responseCode == 0 )            {if( response.hasOwnProperty('msg') ){ Dido_msgBox(responseCode,response.msg) }}            if( responseCode == 1 && response.hasOwnProperty('watingID') )            { dido_listen_to_meeting( response ); }        }      }    }    XHR.open('POST', dd_ajax_url);    XHR.send(formData);  }));}function dido_listen_to_meeting( formresponse ){  document.meetingstart = 0;  var metbx = document.getElementById("meetingbox");  if(metbx)  {    metbx.classList.add('active');    var area = metbx.querySelector("#Meetingarea");    area.innerHTML += formresponse.msg;    var keepGoing = true;    getMachineAction();    async function getMachineAction() {      console.log( "check" );      try {          const response = await fetch(theme_url+'/storage/data/meeting.json?'+ Math.random());          if (response.status === 200) {              const myJson = await response.json();              if (myJson.hasOwnProperty('meeting')) {                var meetingdata = myJson['meeting'];                if (is_object(meetingdata)) {                                      if (meetingdata.hasOwnProperty( formresponse.watingID )) {                                                var meetingID = formresponse.watingID;                    var thisdata = meetingdata[meetingID];                            if (is_object(thisdata)) {                                var roomID = thisdata['roomID'];                                console.log("roomID : "+roomID);                                if( roomID != null && typeof roomID != 'undefined' )                        {                                  keepGoing = false;                                  var Meetingarea = document.getElementById("Meetingarea");                          Meetingarea.innerHTML = "";                                  var fileref=document.createElement('script');                          fileref.setAttribute("id","dido-meeting");                          fileref.setAttribute("type","text/javascript");                          fileref.setAttribute("async","true");                          fileref.setAttribute("src","https://meet.jit.si/external_api.js");                          document.getElementsByTagName("head")[0].appendChild(fileref);                          console.log(roomID);                          checkJitsi(roomID);                                        }                                    }                }                                  }            }          }       } finally {if(keepGoing) {setTimeout(getMachineAction, 2000);}}    };  }}function checkJitsi(roomID){   console.log("roomID form checkJitsi() : "+roomID);  if (typeof JitsiMeetExternalAPI != 'undefined') {meetingload(roomID)}   else { setTimeout( () => { checkJitsi(roomID) } , 2000); }}function meetingload(roomID){  console.log("roomID form meetingload() : "+roomID);  const domain = 'meet.jit.si';  const options = {      roomName: 'newaqar-'+roomID,      width: 900,      height: 600,      parentNode: document.querySelector('#Meetingarea'),      lang: 'ar'  };  const api = new JitsiMeetExternalAPI(domain, options);}function is_object(x){    return typeof x === 'object' && !Array.isArray(x) && x !== null;}